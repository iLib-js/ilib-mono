(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ilibScriptInfoTest"] = factory();
	else
		root["ilibScriptInfoTest"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ScriptData.js":
/*!***************************!*\
  !*** ./src/ScriptData.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   scriptData: () => (/* binding */ scriptData)
/* harmony export */ });
/*
 * ScriptData.js - Generated script data from ucd-full and ilib packages
 *
 * Copyright © 2025 JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file is auto-generated from ucd-full package and ilib package
 * Do not edit this file directly. Run scripts/generate-script-data.js to regenerate.
 */

// Compact script data format
// Each script is represented as: [code, number, name, longId, rtl?, ime?, casing?]
// Empty array elements indicate missing optional values
var scriptData = [["Adlm", 166, "Adlam", "Adlam", true,, true], ["Afak", 439, "Afaka", "Afaka"], ["Aghb", 239, "Caucasian Albanian", "Caucasian_Albanian"], ["Ahom", 338, "Ahom, Tai Ahom", "Ahom"], ["Arab", 160, "Arabic", "Arabic", true], ["Aran", 161, "Arabic (Nastaliq variant)", "Arabic_(Nastaliq_variant)"], ["Armi", 124, "Imperial Aramaic", "Imperial_Aramaic", true], ["Armn", 230, "Armenian", "Armenian",,, true], ["Avst", 134, "Avestan", "Avestan", true], ["Bali", 360, "Balinese", "Balinese"], ["Bamu", 435, "Bamum", "Bamum",, true], ["Bass", 259, "Bassa Vah", "Bassa_Vah"], ["Batk", 365, "Batak", "Batak"], ["Beng", 325, "Bengali (Bangla)", "Bengali"], ["Berf", 258, "Beria Erfe", "Beria_Erfe"], ["Bhks", 334, "Bhaiksuki", "Bhaiksuki"], ["Blis", 550, "Blissymbols", "Blissymbols"], ["Bopo", 285, "Bopomofo", "Bopomofo"], ["Brah", 300, "Brahmi", "Brahmi"], ["Brai", 570, "Braille", "Braille"], ["Bugi", 367, "Buginese", "Buginese"], ["Buhd", 372, "Buhid", "Buhid"], ["Cakm", 349, "Chakma", "Chakma"], ["Cans", 440, "Unified Canadian Aboriginal Syllabics", "Canadian_Aboriginal",, true], ["Cari", 201, "Carian", "Carian"], ["Cham", 358, "Cham", "Cham"], ["Cher", 445, "Cherokee", "Cherokee",,, true], ["Chis", 298, "Chisoi", "Chisoi"], ["Chrs", 109, "Chorasmian", "Chorasmian", true], ["Cirt", 291, "Cirth", "Cirth"], ["Copt", 204, "Coptic", "Coptic",,, true], ["Cpmn", 402, "Cypro-Minoan", "Cypro_Minoan",, true], ["Cprt", 403, "Cypriot syllabary", "Cypriot", true], ["Cyrl", 220, "Cyrillic", "Cyrillic",,, true], ["Cyrs", 221, "Cyrillic (Old Church Slavonic variant)", "Cyrillic_(Old_Church_Slavonic_variant)"], ["Deva", 315, "Devanagari (Nagari)", "Devanagari"], ["Diak", 342, "Dives Akuru", "Dives_Akuru",, true], ["Dogr", 328, "Dogra", "Dogra"], ["Dsrt", 250, "Deseret (Mormon)", "Deseret",,, true], ["Dupl", 755, "Duployan shorthand, Duployan stenography", "Duployan",, true], ["Egyd", 70, "Egyptian demotic", "Egyptian_demotic"], ["Egyh", 60, "Egyptian hieratic", "Egyptian_hieratic"], ["Egyp", 50, "Egyptian hieroglyphs", "Egyptian_Hieroglyphs",, true], ["Elba", 226, "Elbasan", "Elbasan"], ["Elym", 128, "Elymaic", "Elymaic", true], ["Ethi", 430, "Ethiopic (Geʻez)", "Ethiopic",, true], ["Gara", 164, "Garay", "Garay", true,, true], ["Geok", 241, "Khutsuri (Asomtavruli and Nuskhuri)", "Georgian"], ["Geor", 240, "Georgian (Mkhedruli and Mtavruli)", "Georgian"], ["Glag", 225, "Glagolitic", "Glagolitic",,, true], ["Gong", 312, "Gunjala Gondi", "Gunjala_Gondi"], ["Gonm", 313, "Masaram Gondi", "Masaram_Gondi"], ["Goth", 206, "Gothic", "Gothic"], ["Gran", 343, "Grantha", "Grantha"], ["Grek", 200, "Greek", "Greek",,, true], ["Gujr", 320, "Gujarati", "Gujarati"], ["Gukh", 397, "Gurung Khema", "Gurung_Khema"], ["Guru", 310, "Gurmukhi", "Gurmukhi"], ["Hanb", 503, "Han with Bopomofo (alias for Han + Bopomofo)", "Han_with_Bopomofo_(alias_for_Han_+_Bopomofo)",, true], ["Hang", 286, "Hangul (Hangŭl, Hangeul)", "Hangul",, true], ["Hani", 500, "Han (Hanzi, Kanji, Hanja)", "Han",, true], ["Hano", 371, "Hanunoo (Hanunóo)", "Hanunoo"], ["Hans", 501, "Han (Simplified variant)", "Han_(Simplified_variant)",, true], ["Hant", 502, "Han (Traditional variant)", "Han_(Traditional_variant)",, true], ["Hatr", 127, "Hatran", "Hatran", true], ["Hebr", 125, "Hebrew", "Hebrew", true], ["Hira", 410, "Hiragana", "Hiragana"], ["Hluw", 80, "Anatolian Hieroglyphs (Luwian Hieroglyphs, Hittite Hieroglyphs)", "Anatolian_Hieroglyphs",, true], ["Hmng", 450, "Pahawh Hmong", "Pahawh_Hmong"], ["Hmnp", 451, "Nyiakeng Puachue Hmong", "Nyiakeng_Puachue_Hmong"], ["Hntl", 504, "Han (Traditional variant) with Latin (alias for Hant + Latn)", "Han_Traditional_variant_with_Latin_alias_for_Hant_Latn"], ["Hrkt", 412, "Japanese syllabaries (alias for Hiragana + Katakana)", "Katakana_Or_Hiragana"], ["Hung", 176, "Old Hungarian (Hungarian Runic)", "Old_Hungarian", true,, true], ["Inds", 610, "Indus (Harappan)", "Indus_(Harappan)"], ["Ital", 210, "Old Italic (Etruscan, Oscan, etc.)", "Old_Italic"], ["Jamo", 284, "Jamo (alias for Jamo subset of Hangul)", "Jamo_(alias_for_Jamo_subset_of_Hangul)",, true], ["Java", 361, "Javanese", "Javanese"], ["Jpan", 413, "Japanese (alias for Han + Hiragana + Katakana)", "Japanese_(alias_for_Han_+_Hiragana_+_Katakana)",, true], ["Jurc", 510, "Jurchen", "Jurchen"], ["Kali", 357, "Kayah Li", "Kayah_Li"], ["Kana", 411, "Katakana", "Katakana"], ["Kawi", 368, "Kawi", "Kawi"], ["Khar", 305, "Kharoshthi", "Kharoshthi", true], ["Khmr", 355, "Khmer", "Khmer"], ["Khoj", 322, "Khojki", "Khojki"], ["Kitl", 505, "Khitan large script", "Khitan_large_script"], ["Kits", 288, "Khitan small script", "Khitan_Small_Script",, true], ["Knda", 345, "Kannada", "Kannada"], ["Kore", 287, "Korean (alias for Hangul + Han)", "Korean_(alias_for_Hangul_+_Han)",, true], ["Kpel", 436, "Kpelle", "Kpelle"], ["Krai", 396, "Kirat Rai", "Kirat_Rai"], ["Kthi", 317, "Kaithi", "Kaithi"], ["Lana", 351, "Tai Tham (Lanna)", "Tai_Tham"], ["Laoo", 356, "Lao", "Lao"], ["Latf", 217, "Latin (Fraktur variant)", "Latin_(Fraktur_variant)"], ["Latg", 216, "Latin (Gaelic variant)", "Latin_(Gaelic_variant)"], ["Latn", 215, "Latin", "Latin",,, true], ["Leke", 364, "Leke", "Leke"], ["Lepc", 335, "Lepcha (Róng)", "Lepcha"], ["Limb", 336, "Limbu", "Limbu"], ["Lina", 400, "Linear A", "Linear_A",, true], ["Linb", 401, "Linear B", "Linear_B",, true], ["Lisu", 399, "Lisu (Fraser)", "Lisu",, true], ["Loma", 437, "Loma", "Loma"], ["Lyci", 202, "Lycian", "Lycian"], ["Lydi", 116, "Lydian", "Lydian", true], ["Mahj", 314, "Mahajani", "Mahajani"], ["Maka", 366, "Makasar", "Makasar"], ["Mand", 140, "Mandaic, Mandaean", "Mandaic", true], ["Mani", 139, "Manichaean", "Manichaean", true], ["Marc", 332, "Marchen", "Marchen"], ["Maya", 90, "Mayan hieroglyphs", "Mayan_hieroglyphs"], ["Medf", 265, "Medefaidrin (Oberi Okaime, Oberi Ɔkaimɛ)", "Medefaidrin",,, true], ["Mend", 438, "Mende Kikakui", "Mende_Kikakui", true, true], ["Merc", 101, "Meroitic Cursive", "Meroitic_Cursive", true], ["Mero", 100, "Meroitic Hieroglyphs", "Meroitic_Hieroglyphs", true], ["Mlym", 347, "Malayalam", "Malayalam"], ["Modi", 324, "Modi, Moḍī", "Modi"], ["Mong", 145, "Mongolian", "Mongolian"], ["Moon", 218, "Moon (Moon code, Moon script, Moon type)", "Moon_(Moon_code,_Moon_script,_Moon_type)"], ["Mroo", 264, "Mro, Mru", "Mro"], ["Mtei", 337, "Meitei Mayek (Meithei, Meetei)", "Meetei_Mayek"], ["Mult", 323, "Multani", "Multani"], ["Mymr", 350, "Myanmar (Burmese)", "Myanmar"], ["Nagm", 295, "Nag Mundari", "Nag_Mundari"], ["Nand", 311, "Nandinagari", "Nandinagari"], ["Narb", 106, "Old North Arabian (Ancient North Arabian)", "Old_North_Arabian", true], ["Nbat", 159, "Nabataean", "Nabataean", true], ["Newa", 333, "Newa, Newar, Newari, Nepāla lipi", "Newa"], ["Nkdb", 85, "Naxi Dongba (na²¹ɕi³³ to³³ba²¹, Nakhi Tomba)", "Naxi_Dongba_(na²¹ɕi³³_to³³ba²¹,_Nakhi_Tomba)"], ["Nkgb", 420, "Naxi Geba (na²¹ɕi³³ gʌ²¹ba²¹, 'Na-'Khi ²Ggŏ-¹baw, Nakhi Geba)", "Naxi_Geba_(na²¹ɕi³³_gʌ²¹ba²¹,_'Na-'Khi_²Ggŏ-¹baw,_Nakhi_Geba)"], ["Nkoo", 165, "N’Ko", "Nko", true], ["Nshu", 499, "Nüshu", "Nushu",, true], ["Ogam", 212, "Ogham", "Ogham"], ["Olck", 261, "Ol Chiki (Ol Cemet’, Ol, Santali)", "Ol_Chiki"], ["Onao", 296, "Ol Onal", "Ol_Onal"], ["Orkh", 175, "Old Turkic, Orkhon Runic", "Old_Turkic", true], ["Orya", 327, "Oriya (Odia)", "Oriya"], ["Osge", 219, "Osage", "Osage",,, true], ["Osma", 260, "Osmanya", "Osmanya"], ["Ougr", 143, "Old Uyghur", "Old_Uyghur", true], ["Palm", 126, "Palmyrene", "Palmyrene", true], ["Pauc", 263, "Pau Cin Hau", "Pau_Cin_Hau"], ["Pcun", 15, "Proto-Cuneiform", "Proto-Cuneiform"], ["Pelm", 16, "Proto-Elamite", "Proto-Elamite"], ["Perm", 227, "Old Permic", "Old_Permic"], ["Phag", 331, "Phags-pa", "Phags_Pa"], ["Phli", 131, "Inscriptional Pahlavi", "Inscriptional_Pahlavi", true], ["Phlp", 132, "Psalter Pahlavi", "Psalter_Pahlavi", true], ["Phlv", 133, "Book Pahlavi", "Book_Pahlavi"], ["Phnx", 115, "Phoenician", "Phoenician", true], ["Plrd", 282, "Miao (Pollard)", "Miao"], ["Piqd", 293, "Klingon (KLI pIqaD)", "Klingon_(KLI_pIqaD)"], ["Prti", 130, "Inscriptional Parthian", "Inscriptional_Parthian", true], ["Psin", 103, "Proto-Sinaitic", "Proto-Sinaitic"], ["Qaaa", 900, "Reserved for private use (start)", "Reserved_for_private_use_(start)"], ["Qabx", 949, "Reserved for private use (end)", "Reserved_for_private_use_(end)"], ["Ranj", 303, "Ranjana", "Ranjana"], ["Rjng", 363, "Rejang (Redjang, Kaganga)", "Rejang"], ["Rohg", 167, "Hanifi Rohingya", "Hanifi_Rohingya", true], ["Roro", 620, "Rongorongo", "Rongorongo"], ["Runr", 211, "Runic", "Runic"], ["Samr", 123, "Samaritan", "Samaritan", true], ["Sara", 292, "Sarati", "Sarati"], ["Sarb", 105, "Old South Arabian", "Old_South_Arabian", true], ["Saur", 344, "Saurashtra", "Saurashtra"], ["Seal", 590, "(Small) Seal", "Small_Seal"], ["Sgnw", 95, "SignWriting", "SignWriting",, true], ["Shaw", 281, "Shavian (Shaw)", "Shavian"], ["Shrd", 319, "Sharada, Śāradā", "Sharada"], ["Shui", 530, "Shuishu", "Shuishu"], ["Sidd", 302, "Siddham, Siddhaṃ, Siddhamātṛkā", "Siddham"], ["Sidt", 180, "Sidetic", "Sidetic"], ["Sind", 318, "Khudawadi, Sindhi", "Khudawadi"], ["Sinh", 348, "Sinhala", "Sinhala"], ["Sogd", 141, "Sogdian", "Sogdian", true], ["Sogo", 142, "Old Sogdian", "Old_Sogdian", true], ["Sora", 398, "Sora Sompeng", "Sora_Sompeng"], ["Soyo", 329, "Soyombo", "Soyombo"], ["Sund", 362, "Sundanese", "Sundanese"], ["Sunu", 274, "Sunuwar", "Sunuwar"], ["Sylo", 316, "Syloti Nagri", "Syloti_Nagri"], ["Syrc", 135, "Syriac", "Syriac", true], ["Syre", 138, "Syriac (Estrangelo variant)", "Syriac_(Estrangelo_variant)"], ["Syrj", 137, "Syriac (Western variant)", "Syriac_(Western_variant)"], ["Syrn", 136, "Syriac (Eastern variant)", "Syriac_(Eastern_variant)"], ["Tagb", 373, "Tagbanwa", "Tagbanwa"], ["Takr", 321, "Takri, Ṭākrī, Ṭāṅkrī", "Takri"], ["Tale", 353, "Tai Le", "Tai_Le"], ["Talu", 354, "New Tai Lue", "New_Tai_Lue"], ["Taml", 346, "Tamil", "Tamil"], ["Tang", 520, "Tangut", "Tangut",, true], ["Tavt", 359, "Tai Viet", "Tai_Viet"], ["Tayo", 380, "Tai Yo", "Tai_Yo"], ["Telu", 340, "Telugu", "Telugu"], ["Teng", 290, "Tengwar", "Tengwar"], ["Tfng", 120, "Tifinagh (Berber)", "Tifinagh"], ["Tglg", 370, "Tagalog (Baybayin, Alibata)", "Tagalog"], ["Thaa", 170, "Thaana", "Thaana", true], ["Thai", 352, "Thai", "Thai"], ["Tibt", 330, "Tibetan", "Tibetan"], ["Tirh", 326, "Tirhuta", "Tirhuta"], ["Tnsa", 275, "Tangsa", "Tangsa"], ["Todr", 229, "Todhri", "Todhri"], ["Tols", 299, "Tolong Siki", "Tolong_Siki"], ["Toto", 294, "Toto", "Toto"], ["Tutg", 341, "Tulu-Tigalari", "Tulu-Tigalari"], ["Ugar", 40, "Ugaritic", "Ugaritic"], ["Vaii", 470, "Vai", "Vai",, true], ["Visp", 280, "Visible Speech", "Visible_Speech"], ["Vith", 228, "Vithkuqi", "Vithkuqi",,, true], ["Wara", 262, "Warang Citi (Varang Kshiti)", "Warang_Citi",,, true], ["Wcho", 283, "Wancho", "Wancho"], ["Wole", 480, "Woleai", "Woleai"], ["Xpeo", 30, "Old Persian", "Old_Persian"], ["Xsux", 20, "Cuneiform, Sumero-Akkadian", "Cuneiform",, true], ["Yezi", 192, "Yezidi", "Yezidi", true], ["Yiii", 460, "Yi", "Yi",, true], ["Zanb", 339, "Zanabazar Square (Zanabazarin Dörböljin Useg, Xewtee Dörböljin Bicig, Horizontal Square Script)", "Zanabazar_Square"], ["Zinh", 994, "Code for inherited script", "Inherited"], ["Zmth", 995, "Mathematical notation", "Mathematical_notation"], ["Zsye", 993, "Symbols (Emoji variant)", "Symbols_(Emoji_variant)"], ["Zsym", 996, "Symbols", "Symbols"], ["Zxxx", 997, "Code for unwritten documents", "Code_for_unwritten_documents"], ["Zyyy", 998, "Code for undetermined script", "Common"], ["Zzzz", 999, "Code for uncoded script", "Unknown"]];

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScriptInfo: () => (/* binding */ ScriptInfo)
/* harmony export */ });
/* harmony import */ var _ScriptData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ScriptData.js */ "./src/ScriptData.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*
 * ScriptInfo.js - information about scripts
 *
 * Copyright © 2012-2018, 2025 JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// Helper function to get script info with boolean flags
function getScriptInfo(code) {
  var index = _ScriptData_js__WEBPACK_IMPORTED_MODULE_0__.scriptData.findIndex(function (entry) {
    return entry[0] === code;
  });
  if (index === -1) return null;
  var data = _ScriptData_js__WEBPACK_IMPORTED_MODULE_0__.scriptData[index];
  return {
    nb: data[1],
    nm: data[2],
    lid: data[3],
    rtl: data[4] || false,
    ime: data[5] || false,
    casing: data[6] || false
  };
}

// Get all script codes
function getAllScriptCodes() {
  return _ScriptData_js__WEBPACK_IMPORTED_MODULE_0__.scriptData.map(function (entry) {
    return entry[0];
  });
}
var ScriptInfo = /*#__PURE__*/function () {
  function ScriptInfo(script) {
    _classCallCheck(this, ScriptInfo);
    this.script = script;
    this.info = script && getScriptInfo(script);
  }
  return _createClass(ScriptInfo, [{
    key: "getCode",
    value: function getCode() {
      return this.script;
    }
  }, {
    key: "getCodeNumber",
    value: function getCodeNumber() {
      return this.info ? this.info.nb : undefined;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.info ? this.info.nm : undefined;
    }
  }, {
    key: "getLongCode",
    value: function getLongCode() {
      return this.info ? this.info.lid : undefined;
    }
  }, {
    key: "getScriptDirection",
    value: function getScriptDirection() {
      return this.info && this.info.rtl ? "rtl" : "ltr";
    }
  }, {
    key: "getNeedsIME",
    value: function getNeedsIME() {
      return this.info ? this.info.ime : false;
    }
  }, {
    key: "getCasing",
    value: function getCasing() {
      return this.info ? this.info.casing : false;
    }
  }], [{
    key: "_getScriptsArray",
    value: function _getScriptsArray() {
      return getAllScriptCodes();
    }
  }, {
    key: "getAllScripts",
    value: function getAllScripts() {
      return ScriptInfo._getScriptsArray();
    }
  }]);
}();

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*********************************!*\
  !*** ./test/ScriptInfo.test.js ***!
  \*********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/index.js */ "./src/index.js");
/*
 * testscriptinfo.js - test the ScriptInfo class
 *
 * Copyright © 2013-2017, 2019-2022, 2024-2025 JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


describe('ScriptInfo', function () {
  test('should create a script info instance', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo();
    expect(si).not.toBeNull();
  });
  test('should create a script info instance with script code', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si).not.toBeNull();
    expect(si.getCode()).toBe('Latn');
  });
  test('should get script code number', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si.getCodeNumber()).toBe(215);
  });
  test('should get script name', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si.getName()).toBe('Latin');
  });
  test('should get script long code', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si.getLongCode()).toBe('Latin');
  });
  test('should get script direction', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si.getScriptDirection()).toBe('ltr');
  });
  test('should get script casing', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si.getCasing()).toBe(true);
  });
  test('should get script IME requirement', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Latn');
    expect(si.getNeedsIME()).toBe(false);
  });
  test('should handle RTL script direction', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Arab');
    expect(si.getScriptDirection()).toBe('rtl');
  });
  test('should handle RTL script casing', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Arab');
    expect(si.getCasing()).toBe(false);
  });
  test('should handle RTL script IME requirement', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Arab');
    expect(si.getNeedsIME()).toBe(false);
  });
  test('should handle unknown script correctly', function () {
    var si = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo('Xxxx');
    expect(si.getCode()).toBe('Xxxx');
    expect(si.getCodeNumber()).toBeUndefined();
    expect(si.getName()).toBeUndefined();
    expect(si.getLongCode()).toBeUndefined();
    expect(si.getScriptDirection()).toBe('ltr');
    expect(si.getNeedsIME()).toBe(false);
    expect(si.getCasing()).toBe(false);
  });
  test('should get all available scripts', function () {
    var scripts = _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ScriptInfo.getAllScripts();
    expect(scripts).not.toBeNull();
    expect(scripts.length).toBe(226);
    expect(scripts[0]).toBe('Adlm');
    expect(scripts[1]).toBe('Afak');
    expect(scripts[2]).toBe('Aghb');
  });
});
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});