# JavaScript Coding Standards

## Code Style
- Follow JSDoc standards for documentation in javascript files
- Follow TSDoc standards for documentation in typescript files
- Use semicolons at the end of statements
- Use double quotes for strings unless single quotes are required
- Use 4-space indentation and convert any existing tab chars used for indentation into 4 spaces each
- Use camelCase for variables and functions
- Use PascalCase for classes and constructors
- Use UPPER_SNAKE_CASE for constants
- Make sure no lines have trailing white space

## Module Structure
- Use ES6 modules (`import`/`export`) when possible
- For CommonJS compatibility, use `module.exports` and `require()`
- Place imports at the top of the file
- Group imports: external libraries first, then internal packages, then relative imports. Separate each group with a blank line.

## Testing
- Write unit tests for all new functionality
- Use Jest as the testing framework
- Place test files in the `test/` directory
- Name test files with `.test.js` suffix
- Use descriptive English test names that explain the expected behavior

## Documentation
- Document all public APIs with JSDoc comments
- Include parameter types, return types, and examples
- Document complex algorithms and business logic
- Keep documentation up to date with code changes

## Error Handling
- Use try-catch blocks for error-prone operations
- Throw meaningful error messages
- Handle async errors properly with `.catch()` or try-catch in async functions
- Validate input parameters at the beginning of functions

## Performance
- Avoid unnecessary object creation in loops
- Use appropriate data structures for the task
- Consider memory usage for large datasets
- Profile code when performance is critical
