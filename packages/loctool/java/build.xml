<?xml version="1.0" encoding="UTF-8"?>
<!--
build.xml - build everything in the java subdir 

Copyright Â© 2016, HealthTap Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

See the License for the specific language governing permissions and
limitations under the License.

-->
<!-- ======================================================================= -->
<!-- Main build file for the htglob java bits            -->
<!-- ======================================================================= -->
<project name="htglob" default="all">
	<!-- =================================================================== -->
	<!-- properties                                                          -->
	<!-- =================================================================== -->

	<!-- Give user a chance to override properties without editing this file -->
	<!-- (and without typing -D each time it compiles it)                    -->
	<property file="../build.properties" />
	<property file="build.properties" />

	<!-- Properties that can be overridden -->
	<!-- directories -->
	<property name="build.base" value="." />

	<property name="build.dist" value="${build.base}/../dist" />
	<property name="build.export" value="${build.base}/../export" />

	<property name="overall.lib" value="./lib" />

	<property name="build.classes" value="${build.base}/classes" />
	<property name="build.classes.debug" value="${build.classes}/debug" />
	<property name="build.classes.debug.instrumented" value="${build.classes.debug}/instrumented" />
	<property name="build.classes.release" value="${build.classes}/release" />
	<property name="build.localedata" value="${build.export}/locale" />
	<property name="build.lib" value="${build.base}/lib" />
	<property name="build.output" value="${build.base}/output" />
	<property name="build.output.debug" value="${build.output}/debug" />
	<property name="build.output.release" value="${build.output}/release" />
	<property name="build.output.coverage" value="${build.output}/coverage" />
	<property name="build.output.reports" value="${build.output}/reports" />
	<property name="build.output.junit" value="${build.output}/junit" />
	<property name="build.src" value="${build.base}/src" />
	<property name="build.javadoc" value="${build.output}/javadoc" />
	<property name="build.config" value="config" />
	<property name="log4j.config.file" value="${build.config}/log4j.properties" />

	<property name="jar.htglob" value="htglob-${version}.jar" />

	<!-- =================================================================== -->
	<!-- Class paths                                                         -->
	<!-- =================================================================== -->
	<path id="project.class.path.base">
		<fileset dir="${overall.lib}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${build.lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.config}" />
	</path>

	<path id="project.class.path.release">
		<pathelement path="${build.classes.release}" />
		<path refid="project.class.path.base" />
	</path>

	<path id="project.class.path.debug">
		<pathelement path="${build.classes.debug}" />
		<path refid="project.class.path.base" />
	</path>

	<path id="project.class.path.instrumented">
		<pathelement path="${build.classes.debug.instrumented}" />
		<path refid="project.class.path.base" />
	</path>

	<path id="project.classpath.junit">
		<path refid="project.class.path.debug" />
	</path>

	<!-- =================================================================== -->
	<!-- Implement the standard targets                                      -->
	<!-- =================================================================== -->
	<target name="all" depends="jars" description="Build everything. This is the target that the build should run." />

	<target name="clean" description="Remove all generated files to start from scratch">
		<delete dir="${build.classes}" />
		<delete dir="${build.output}" />
	</target>

	<target name="prepare" description="Prepare all directories that are needed before the project can be built">
		<mkdir dir="${build.classes.debug}" />
		<mkdir dir="${build.classes.debug.instrumented}" />
		<mkdir dir="${build.classes.release}" />
		<mkdir dir="${build.output.debug}" />
		<mkdir dir="${build.output.release}" />
		<mkdir dir="${build.output.coverage}" />
		<mkdir dir="${build.output.reports}" />
		<mkdir dir="${build.output.junit}" />
	</target>

	<!-- =================================================================== -->
	<!-- Create all jar files                                                -->
	<!-- =================================================================== -->
	<target name="jars" depends="jars.debug,jars.release" description="Create all jar files" />

	<target name="jars.debug" depends="jar.htglob.debug" description="Create all jar files in debug mode" />
	<target name="jars.release" depends="jar.htglob.release" description="Create all jar files in release mode" />

	<!-- =================================================================== -->
	<!-- Create the core jar file                                            -->
	<!-- =================================================================== -->
	<target name="compile" description="compiles java files into classes in debug or release mode">
		<!-- compile the source code -->
		<javac srcdir="${build.src}" destdir="${classesDir}" failonerror="true" debug="${debugFlag}" encoding="utf-8" includeAntRuntime="no" optimize="${optimizeFlag}" source="1.7" target="1.7">
			<classpath refid="${classPathRef}" />
			<exclude name="**/.svn/**" />
		</javac>
		<copy todir="${classesDir}">
			<fileset dir="${build.src}">
				<include name="**/*.properties" />
				<include name="**/*.jdo" />
			</fileset>
		</copy>
	</target>

	<target name="compile.release" depends="prepare" description="Compile all java files into objects in release mode">
		<antcall target="compile">
			<param name="classesDir" value="${build.classes.release}" />
			<param name="classPathRef" value="project.class.path.release" />
			<param name="debugFlag" value="off" />
			<param name="optimizeFlag" value="on" />
		</antcall>
	</target>

	<target name="compile.debug" depends="prepare" description="Compile all java files into objects in debug mode">
		<antcall target="compile">
			<param name="classesDir" value="${build.classes.debug}" />
			<param name="classPathRef" value="project.class.path.debug" />
			<param name="debugFlag" value="on" />
			<param name="optimizeFlag" value="off" />
		</antcall>
	</target>

	<target name="build.jar.htglob" description="Do the actual work of building the htglob jar">
		<jar jarfile="${outputDir}/${jar.htglob}" compress="on">
			<fileset dir="${classesDir}">
				<include name="**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<target name="jar.htglob.release" depends="compile.release" description="Create the release version of the ct.jar file">
		<antcall target="build.jar.htglob">
			<param name="classesDir" value="${build.classes.release}" />
			<param name="outputDir" value="${build.output.release}" />
		</antcall>
	</target>

	<target name="jar.htglob.debug" depends="compile.debug" description="Create the debug version of the ct.jar file">
		<antcall target="build.jar.htglob">
			<param name="classesDir" value="${build.classes.debug}" />
			<param name="outputDir" value="${build.output.debug}" />
		</antcall>
	</target>

	<target name="dist.debug" depends="jars.debug" description="Create the distribution of the debug versions of the built objects">
	</target>

	<target name="dist.release" depends="jars.release" description="Create the distribution of the release versions of the built objects">
	</target>

	<target name="export" description="export all files that other subprojects may need before building">
	</target>

	<target name="dist" depends="dist.release,doc" description="Distribute all built objects in preparation for running">
		<mkdir dir="${build.export}/java" />
		<copy todir="${build.export}/java">
			<fileset dir="${build.output.release}/">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.export}/java/lib">
			<fileset dir="${build.lib}/">
				<include name="log4j-*.jar" />
				<include name="log4j.properties" />
				<include name="json-*.jar" />
			</fileset>
		</copy>
		<mkdir dir="${build.export}/doc/javadoc" />
		<copy todir="${build.export}/doc/javadoc">
			<fileset dir="${build.javadoc}">
				<include name="**/*" />
			</fileset>
		</copy>
		<mkdir dir="${build.export}/src/java" />
		<copy todir="${build.export}/src/java">
			<fileset dir="${build.base}">
				<include name="src/**" />
				<include name="build.xml" />
				<include name="build.properties" />
				<include name="lib/json*" />
				<include name="lib/log4j*" />
				<exclude name="**/test/**" />
			</fileset>
		</copy>
	</target>

	<target name="package" depends="dist.release,doc" description="Package all objects in the distribution">
		<copy todir="${build.dist}">
			<fileset dir="${build.output.release}/">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<zip destfile="${build.dist}/htglob-${version}-doc.zip" basedir="${build.javadoc}" />
		<tar destfile="${build.dist}/htglob-${version}-doc.tgz" basedir="${build.javadoc}" compression="gzip" />
	</target>

	<target name="test.core" depends="jars.debug" description="run the tests">
		<echo>Testing the core classes</echo>
		<junit haltonfailure="on" fork="on" dir="${basedir}" showoutput="on" printsummary="on" >
			<jvmarg value="-Demma.coverage.out.file=${build.output.coverage}/core.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
			<classpath refid="project.classpath.junit" />
			<formatter type="xml" />
			<formatter type="plain" usefile="off" />
			<batchtest todir="${build.output.junit}">
				<fileset dir="${build.classes.debug}">
					<include name="**/AllTests.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="core.junit.report" description="Generate a report on the junit tests">
		<mkdir dir="${build.output.reports}/junit" />
		<junitreport todir="${build.output.reports}/junit">
			<fileset dir="${build.output.junit}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${build.output.reports}/junit" />
		</junitreport>
		<echo>junit report for core sent to ${build.output.reports}/junit/index.html</echo>
	</target>

	<!-- target name="test" depends="test.core"/ -->
	<target name="test.only" depends="test.core" description="Run all tests" />
	<target name="reports.only" depends="core.junit.report" description="Generate reports on previously run tests" />
	<target name="reports" depends="test.only,reports.only" description="Run all tests, then generate reports on the results" />
	<target name="test" depends="reports" description="Run all tests and build all reports" />

	<target name="testjavadoc" description="test whether or not the javadocs need to be rebuilt">
		<uptodate property="core.javadoc.not.needed" targetfile="${build.javadoc}/index.html">
			<srcfiles dir="${build.src}" includes="**/*.java" />
		</uptodate>
	</target>

	<target name="doc" depends="dist.release,testjavadoc" description="creates javadoc for all local java files in this project" unless="core.javadoc.not.needed">
		<delete dir="${build.javadoc}" />
		<mkdir dir="${build.javadoc}" />
		<javadoc packagenames="com.healthtap.*" sourcepath="${build.src}" destdir="${build.javadoc}" defaultexcludes="yes" excludepackagenames="**/test" author="false" use="true" classPathRef="project.class.path.debug" windowtitle="ILib Core Library">
			<doctitle><![CDATA[<h1>HealthTap Java Globalization Library.</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2016 HealthTap, Inc. All Rights Reserved.</i>]]></bottom>
			<link href="http://java.sun.com/j2se/1.8/docs/api/" />
		</javadoc>
	</target>
</project>
