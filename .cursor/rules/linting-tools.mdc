# Linting Tools Development Standards

## Linting Architecture
The ilib-lint system provides internationalization and localization linting:
- `ilib-lint` - Main linting framework
- `ilib-lint-common` - Common linting utilities
- `ilib-lint-javascript` - ilib-lint plugin containing JavaScript-specific linting rules
- `ilib-lint-react` - ilib-lint plugin containing React-specific linting rules
- `ilib-lint-python` - ilib-lint plugin containing Python-specific linting rules
- `ilib-lint-python-gnu` - ilib-lint plugin containing GNU gettext for Python linting rules

Ilib-lint is capable of linting both source code looking for internationalization issues,
and translations in resource files, looking for translation problems and inconsistencies.

## Rule Development
When creating or modifying linting rules:
- Extend the base Rule class from `ilib-lint-common`
- Implement required methods: `getRuleName()`, `getDescription()`
- Provide clear error messages with actionable suggestions
- Include severity levels (error, warning, suggestion)
- Support rule configuration options

## Internationalization Checks
Focus on common i18n issues:
- Hardcoded strings that should be externalized
- Missing locale-specific formatting
- Incorrect date/time/number formatting
- Missing pluralization handling
- Inconsistent string concatenation
- Missing RTL/LTR support

## Localization/Translation Checks
Focus on consistency:
- That the translation matches the source in various ways, including, but not limited to:
    - They say the same thing in different languages
    - They have the same type and number of replacement parameters
    - They use similar syntax for things like ICU plurals or XML tags
    - They have the same leading and trailing whitespace
- Syntax of translations depends on the programming language that the source string was extracted from
    - Need to apply the rules for strings from that programming language plus any generic non-language-specific rules
    - Programming languages should have their own ruleset to collect these rule and make it easy to configure a filetype that uses those rules

## Programming Language-Specific Rules
Each language plugin should:
- Parse the target language syntax correctly
- Identify translatable strings
- Check for proper resource usage
- Validate locale-specific patterns
- Handle language-specific i18n patterns

## Testing Linting Rules
- Test with various code patterns and edge cases
- Verify rule severity levels
- Test configuration options
- Include positive and negative test cases
- Test rule performance with large files

## Debugging
Use the provided debugging commands:
```bash
# Debug ilib-lint
NODE_PATH=packages node --inspect packages/ilib-lint/src/index.js
```

## Configuration
- Support rule-specific configuration
- Allow rule enabling/disabling
- Support custom severity levels
- Provide rule documentation and examples as md files in the `doc/` directory of the package
- Support project-specific rule sets
