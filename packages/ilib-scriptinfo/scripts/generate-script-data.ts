#!/usr/bin/env node

/*
 * generate-script-data.js - Generate ScriptData.ts from ucd-full package
 *
 * Copyright © 2025 JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import fs from "fs";
import path from "path";
import { ScriptDataEntry } from "../src/ScriptData";
import ilibScriptsData from "ilib/locale/scripts.json";
import ucdFullData from "ucd-full/ScriptInfo.json";

function generateScriptData() {
    try {
        // Process the data using ucd-full as the primary source for all scripts
        const scriptData: ScriptDataEntry[] = [];

        ucdFullData.iso15924.forEach((ucdScript) => {
            const code = ucdScript.code;
            const number = parseInt(ucdScript.number, 10);
            const name = ucdScript.englishName;

            // Create long identifier from name (replace spaces and special chars with underscores)
            let longId = name.replace(/[^a-zA-Z0-9\s]/g, "").replace(/\s+/g, "_");

            // Handle special cases for long identifiers
            if (ucdScript.pva) {
                longId = ucdScript.pva;
            }

            // Create array entry: [code, number, name, longId, rtl?, ime?, casing?]
            const entry: ScriptDataEntry = [code, number, name, longId];

            // Backfill with ilib data if available
            if (code in ilibScriptsData) {
                const ilibScript = ilibScriptsData[code as keyof typeof ilibScriptsData];

                // Use ilib's long identifier if available (it's more standardized)
                if (ilibScript.lid) {
                    entry[3] = ilibScript.lid;
                }

                // Add boolean flags as optional array indices 4-6
                if ("rtl" in ilibScript && ilibScript.rtl) entry[4] = true;
                if ("ime" in ilibScript && ilibScript.ime) entry[5] = true;
                if ("casing" in ilibScript && ilibScript.casing) entry[6] = true;
            }

            scriptData.push(entry);
        });

        // Generate the output file content with ESM format
        const outputContent = `/*
 * ScriptData.ts - Generated script data from ucd-full and ilib packages
 *
 * Copyright © @currentYear@ JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file is auto-generated from ucd-full package and ilib package
 * Do not edit this file directly. Run scripts/generate-script-data.js to regenerate.
 */

// Compact script data format
// Each script is represented as: [code, number, name, longId, rtl?, ime?, casing?]
// Empty array elements indicate missing optional values
export type ScriptDataEntry = [string, number, string, string, boolean?, boolean?, boolean?];

export const scriptData: ScriptDataEntry[] = [
${scriptData
    .map(
        (entry) =>
            `    [${entry
                .map((val, i) => {
                    if (i < 4) return JSON.stringify(val);
                    return val === true ? "true" : "";
                })
                .join(",")}]`
    )
    .join(",\n")}
];
`.replace("@currentYear@", new Date().getFullYear().toString());

        // Write the output file
        const outputPath = path.join(__dirname, "../src/ScriptData.ts");
        fs.writeFileSync(outputPath, outputContent, "utf8");

        console.log(`✅ Generated TS ScriptData.ts with ${scriptData.length} scripts`);
        console.log(`📁 Output file: ${outputPath}`);
        console.log(`📊 Source: ucd-full package (${ucdFullData.iso15924.length} scripts) + ilib package backfill`);
    } catch (error) {
        console.error("❌ Error generating script data:", error instanceof Error ? error.message : String(error));
        process.exit(1);
    }
}

// Run the generator
generateScriptData();
