#!/bin/bash
set -euo pipefail

## Script to carry over tags from migrated repositories which were added into the monorepo
## Usage: scripts/sync_tags.sh [ilib-common wadimw/ilib-loctool-pendo-md ...]

# allow overwriting default org for all packages
DEFAULT_ORG=${DEFAULT_ORG:-"iLib-js"}

# allow overwriting default reviewers
REVIEWERS=${REVIEWERS:-"ehoogerbeets,nmkedziora,wadimw"}

# some packages that we already have were added with path packages/ilib-<package>
# but didn't have the ilib- prefix in the original repository name ilib-js/<package>;
# map them to the correct repository names (e.g. package ilib-xliff > repository ilib-js/xliff)
PKG_TO_REPO_MAP=(
    "ilib-xliff:xliff"
    "ilib-tmx:tmx"
)

# ensure that the GitHub CLI is installed and authenticated
if ! command -v gh &> /dev/null; then
    echo "GitHub CLI is not installed. Please install it before running this script"
    exit 1
fi
if ! gh auth status -h github.com &> /dev/null; then
    echo "GitHub CLI is not authenticated. Please authenticate before running this script"
    exit 1
fi

# log of successful and failed operations
SUCCESSFUL_TAGS=""
FAILED_REPOS=""
FAILED_TAGS=""
MISMATCHED_TAGS=""

# if no repositories are provided through arguments, use foldernames in packages/ directory
REPOS=("$@")
if [ ${#REPOS[@]} -eq 0 ]; then
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    # shellcheck disable=SC2207 # we want to split the output of ls
    REPOS=($(ls "$SCRIPT_DIR/../packages"))
fi

for REPO in "${REPOS[@]}"; do
    # parse `org/` prefix if provided
    ORG=$DEFAULT_ORG
    if [[ "$REPO" == *"/"* ]]; then
        ORG=$(echo "$REPO" | cut -d'/' -f1)
        REPO=$(echo "$REPO" | cut -d'/' -f2)
    fi
    
    # map package name to repository name if needed
    PKG="$REPO"
    for mapping in "${PKG_TO_REPO_MAP[@]}"; do
        if [ "$REPO" == "${mapping%%:*}" ]; then
            PKG="$REPO"
            REPO="${mapping#*:}"
            break
        fi
    done

    # ensure that the package exists in the monorepo
    if [ ! -d "packages/$PKG" ]; then
        echo "Package $PKG does not exist in the monorepo"
        FAILED_REPOS="$FAILED_REPOS $ORG/$REPO"
        continue
    fi

    echo "Processing repository $ORG/$REPO"

    # construct git SSH url
    URL="git@github.com:$ORG/$REPO.git"
    echo "Git URL $URL"

    # check if the repository exists
    if ! git ls-remote --exit-code "$URL" &> /dev/null; then
        echo "Repository $URL does not exist"
        continue
    fi

    # iterate over existing tags in the remote repository
    while read -r TAG_HASH TAG_REF; do
        # process only annotated tags (i.e. with the ^{} suffix)
        if [[ ! $TAG_REF =~ \^\{\}$ ]]; then
            continue
        fi

        # extract tag name
        OLD_TAG=$(basename "${TAG_REF%'^{}'}")
        # strip the v prefix
        OLD_TAG=${OLD_TAG#v}

        # prefix tag name with the package name
        # note: name format matches tags generated by changeset CLI
        NEW_TAG="$PKG@$OLD_TAG"
        # during original migration we used the following format:
        # NEW_TAG="$PKG-v$OLD_TAG"

        # check if the tag already exists in the monorepo
        if MONOREPO_HASH=$(git rev-parse -q --verify "refs/tags/$NEW_TAG^{}"); then
            # warn if it points to a different commit
            if [ "$MONOREPO_HASH" != "$TAG_HASH" ]; then
                echo "WARNING: Tag $NEW_TAG already exists in the monorepo and points to a different commit"
                echo "  Monorepo commit $MONOREPO_HASH"
                echo "  Remote commit $TAG_HASH"
                MISMATCHED_TAGS="$MISMATCHED_TAGS $NEW_TAG (monorepo $MONOREPO_HASH, remote $TAG_HASH)"
            else
                echo "Tag $NEW_TAG already exists in the monorepo"
                SUCCESSFUL_TAGS="$SUCCESSFUL_TAGS $NEW_TAG"
            fi
            continue
        fi

        # create a tag in the monorepo
        echo "Creating anotated tag $NEW_TAG $TAG_HASH"
        if ! git tag -a "$NEW_TAG" -m "$NEW_TAG" "$TAG_HASH"; then
            echo "Failed to create tag $NEW_TAG"
            FAILED_TAGS="$FAILED_TAGS $NEW_TAG ($TAG_HASH)"
            continue
        fi

        # log successful tag creation
        SUCCESSFUL_TAGS="$SUCCESSFUL_TAGS $NEW_TAG"

    done < <(git ls-remote --tags "$URL")
done

# print summary
if [ -n "$FAILED_REPOS" ]; then
    echo "Failed to process repositories:$FAILED_REPOS"
fi

if [ -n "$FAILED_TAGS" ]; then
    echo "Failed to create tags:$FAILED_TAGS"
fi

if [ -n "$MISMATCHED_TAGS" ]; then
    echo "Mismatched tags:$MISMATCHED_TAGS"
fi

# push successful tags to the remote
if [ -n "$SUCCESSFUL_TAGS" ]; then
    echo "Pushing created tags to the remote"
    # shellcheck disable=SC2086 # we want to split the list of tags
    git push origin $SUCCESSFUL_TAGS
fi