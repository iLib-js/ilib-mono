#!/bin/bash
set -euo pipefail

## Script to carry over tags from migrated repositories which were added into the monorepo
## Usage: scripts/sync_tags.sh [ilib-common wadimw/ilib-loctool-pendo-md ...]

# allow overwriting default org for all packages
DEFAULT_ORG=${DEFAULT_ORG:-"iLib-js"}

# allow recreating tags if they already exist in the monorepo
RECREATE_TAGS=${RECREATE_TAGS:-"false"}
FORCE_RECREATE_MISMATCHED_TAGS=${FORCE_RECREATE_MISMATCHED_TAGS:-"false"}

# some packages that we already have were added with path packages/ilib-<package>
# but didn't have the ilib- prefix in the original repository name ilib-js/<package>;
# map them to the correct repository names (e.g. package ilib-xliff > repository ilib-js/xliff)
PKG_TO_REPO_MAP=(
    "ilib-xliff:xliff"
    "ilib-tmx:tmx"
)

# ensure that the GitHub CLI is installed and authenticated
if ! command -v gh &> /dev/null; then
    echo "GitHub CLI is not installed. Please install it before running this script"
    exit 1
fi
if ! gh auth status -h github.com &> /dev/null; then
    echo "GitHub CLI is not authenticated. Please authenticate before running this script"
    exit 1
fi

# log of successful and failed operations
SUCCESSFUL_TAGS=""
FAILED_REPOS=""
FAILED_TAGS=""
MISMATCHED_TAGS=""

# if no repositories are provided through arguments, use foldernames in packages/ directory
REPOS=("$@")
if [ ${#REPOS[@]} -eq 0 ]; then
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    # shellcheck disable=SC2207 # we want to split the output of ls
    REPOS=($(ls "$SCRIPT_DIR/../packages"))
fi

for REPO in "${REPOS[@]}"; do
    # parse `org/` prefix if provided
    ORG=$DEFAULT_ORG
    if [[ "$REPO" == *"/"* ]]; then
        ORG=$(echo "$REPO" | cut -d'/' -f1)
        REPO=$(echo "$REPO" | cut -d'/' -f2)
    fi
    
    # map package name to repository name if needed
    PKG="$REPO"
    for mapping in "${PKG_TO_REPO_MAP[@]}"; do
        if [ "$REPO" == "${mapping%%:*}" ]; then
            PKG="$REPO"
            REPO="${mapping#*:}"
            break
        fi
    done

    # ensure that the package exists in the monorepo
    if [ ! -d "packages/$PKG" ]; then
        echo "Package $PKG does not exist in the monorepo"
        FAILED_REPOS="$FAILED_REPOS $ORG/$REPO"
        continue
    fi

    echo "Processing repository $ORG/$REPO"

    # check if the remote repository exists
    if ! gh api "/repos/$ORG/$REPO" &> /dev/null; then
        echo "Repository $ORG/$REPO does not exist"
        FAILED_REPOS="$FAILED_REPOS $ORG/$REPO"
        continue
    fi

    # iterate over existing tags in the remote repository
    while read -r TAG_HASH; do
        # fetch tag info through GH API
        if ! TAG_METADATA=$(gh api "/repos/$ORG/$REPO/git/tags/$TAG_HASH"); then
            echo "Failed to fetch tag info for $TAG_HASH"
            continue
        fi

        TAG_NAME=$(jq -r '.tag' <<< "$TAG_METADATA")
        TAG_COMMIT_HASH=$(jq -r '.object.sha' <<< "$TAG_METADATA")
        TAG_DATE=$(jq -r '.tagger.date' <<< "$TAG_METADATA")
        TAG_MESSAGE=$(jq -r '.message' <<< "$TAG_METADATA")
        TAG_AUTHOR_NAME=$(jq -r '.tagger.name' <<< "$TAG_METADATA")
        TAG_AUTHOR_EMAIL=$(jq -r '.tagger.email' <<< "$TAG_METADATA")

        # strip the v prefix
        OLD_TAG=${TAG_NAME#v}

        # prefix tag name with the package name
        # note: name format matches tags generated by changeset CLI
        NEW_TAG="$PKG@$OLD_TAG"
        # during original migration we used the following format:
        # NEW_TAG="$PKG-v$OLD_TAG"

        # check if the tag already exists in the monorepo
        if MONOREPO_COMMIT_HASH=$(git rev-parse -q --verify "refs/tags/$NEW_TAG^{}"); then
            if [ "$MONOREPO_COMMIT_HASH" != "$TAG_COMMIT_HASH" ]; then
                # warn if it points to a different commit
                echo "WARNING: Tag $NEW_TAG already exists in the monorepo and points to a different commit"
                echo "  Monorepo commit $MONOREPO_COMMIT_HASH"
                echo "  Remote commit $TAG_COMMIT_HASH"

                if [ "$FORCE_RECREATE_MISMATCHED_TAGS" == "true" ]; then
                    # delete the mismatched tag so that it can be recreated
                    echo "WARNING: Deleting mismatched tag $NEW_TAG"
                    git tag -d "$NEW_TAG"
                else
                    # log mismatched tag
                    printf -v MISMATCHED_TAGS "%s%s\n monorepo: %s remote: %s\n" "$MISMATCHED_TAGS" "$NEW_TAG" "$MONOREPO_COMMIT_HASH" "$TAG_COMMIT_HASH"
                    continue
                fi
            else
                if [ "$RECREATE_TAGS" == "true" ]; then
                    # delete the tag so that it can be recreated
                    echo "Deleting tag $NEW_TAG to recreate it"
                    git tag -d "$NEW_TAG"
                else
                    # log successful tag
                    echo "Tag $NEW_TAG already exists in the monorepo"
                    SUCCESSFUL_TAGS="$SUCCESSFUL_TAGS $NEW_TAG"
                    continue
                fi
            fi
        fi

        # create a tag in the monorepo
        echo "Creating anotated tag $NEW_TAG $TAG_COMMIT_HASH"

        if ! ( # run in a subshell to avoid polluting the environment
            export GIT_COMMITTER_DATE="$TAG_DATE"
            export GIT_COMMITTER_NAME="$TAG_AUTHOR_NAME"
            export GIT_COMMITTER_EMAIL="$TAG_AUTHOR_EMAIL"
            git tag -a "$NEW_TAG" -m "$TAG_MESSAGE" "$TAG_COMMIT_HASH"
        ); then
                echo "Failed to create tag $NEW_TAG"
                printf -v FAILED_TAGS "%s%s\t%s\n" "$FAILED_TAGS" "$NEW_TAG" "$TAG_HASH"
            continue
        fi

        # log successful tag creation
        SUCCESSFUL_TAGS="$SUCCESSFUL_TAGS $NEW_TAG"

    done < <(gh api "/repos/$ORG/$REPO/git/refs/tags" --jq '.[].object.sha')
done

echo "======="
echo "Summary"
echo ""

# print summary
if [ -n "$FAILED_REPOS" ]; then
    echo "Failed to process repositories:"
    echo "$FAILED_REPOS"
fi

if [ -n "$FAILED_TAGS" ]; then
    echo "Failed to create tags:"
    echo "$FAILED_TAGS"
fi

if [ -n "$MISMATCHED_TAGS" ]; then
    echo "Mismatched tags:"
    echo "$MISMATCHED_TAGS"
fi

echo "Successfully created tags:"
echo "$SUCCESSFUL_TAGS"

echo "======="

# push successful tags to the remote
if [ -n "$SUCCESSFUL_TAGS" ]; then
    echo "Pushing created tags to the remote"
    # shellcheck disable=SC2086 # we want to split the list of tags
    git push origin $SUCCESSFUL_TAGS
fi